using System;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Collections.Generic;
using System.Collections;
using System.Text.RegularExpressions;

namespace AssociativeArrays
{
    class Program
    {
        static void Main(string[] args)
        {
            string regex = @"(^>>)([A-z]{1,})(<<)([-+]?[0-9]*\.?[0-9]*)\!(\d{1,})\b";

            List<string> names = Console.ReadLine().Split(", ", StringSplitOptions.RemoveEmptyEntries).ToList();

            Dictionary<string, int> result = new Dictionary<string, int>();

            string firstName = "";
            string currentScore = "";
            int newScore = 0;

            foreach (var item in names)
            {
                result.Add(item, 0);
            }

            string input = Console.ReadLine();
            string person = @"([A-Za-z])";
            string score = @"([0-9])";

            while (input != "end of race")
            {
                MatchCollection matches = Regex.Matches(input, person);

                foreach (Match item in matches)
                {
                    firstName += item.Groups[1].Value;

                    
                }
                if (result.ContainsKey(firstName))
                {
                    MatchCollection otherMatches = Regex.Matches(input, score);

                    foreach (Match sc in otherMatches)
                    {
                        currentScore += sc.Groups[1].Value;
                        
                    }

                    foreach (char item in currentScore)
                    {
                        newScore += int.Parse(item.ToString());
                    }
                    

                    result[firstName] += newScore;
                }

                input = Console.ReadLine();
                newScore = 0;
                firstName = string.Empty;
                currentScore = string.Empty;
            }

            result = result
                .OrderByDescending(x => x.Value).Take(3)
                .ToDictionary(x => x.Key, y => y.Value);

            int counter = 1;

            foreach (var kvp in result)
            {
                if (counter == 1)
                {
                    Console.WriteLine($"1st place: {kvp.Key}");
                }
                else if (counter == 2)
                {
                    Console.WriteLine($"2nd place: {kvp.Key}");
                }
                else if (counter == 3)
                {
                    Console.WriteLine($"3rd place: {kvp.Key}");
                }
                else
                {
                    break;
                }
                counter++;
            }

        }
    }
}
